// Copyright 2020 The Meerkat Authors
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package executor

    import (
    	"meerkat/internal/storage/vector"
    )

{{range .}}

func (op *SortOperator) create{{.Name}}Vector(v vector.{{.Name}}Vector) vector.{{.Name}}Vector {
	var rv vector.{{.Name}}Vector
	total := 0
	if v.HasNulls() {
		rv = vector.DefaultVectorPool().Get{{.Name}}Vector()
		for i := op.batchProc * op.ctx.Sz(); i < len(op.order); i++ {
			rv.Append{{.Name}}(v.Values()[op.order[i]])
			if v.IsValid(op.order[i]) {
				rv.SetValid(i)
			} else {
				rv.SetInvalid(i)
			}
			total++
		}
	} else {
		rv = vector.DefaultVectorPool().GetNotNullable{{.Name}}Vector()
		for i := op.batchProc * op.ctx.Sz(); i < len(op.order); i++ {
			rv.Append{{.Name}}(v.Values()[op.order[i]])
			total++
		}
	}
	return rv
}


{{if or (eq .Name "Int") (eq .Name "Float") }}

    type {{.Name}}VectorSorter struct {
        order []int
        v     *vector.{{.Name}}Vector
        asc   bool
        less  func(i, j int) bool
    }

    func (v *{{.Name}}VectorSorter) Len() int { return len(v.order) }

    func (v *{{.Name}}VectorSorter) lessNull(i, j int) bool {
        vi := v.v.Values()[v.order[i]]
        vj := v.v.Values()[v.order[j]]

        // by default the nulls should be in the last positions.
        if !v.v.IsValid(v.order[i]) {
            vi = math.Max{{.Name}}64
        }

        if !v.v.IsValid(v.order[j]) {
            vj = math.Max{{.Name}}64
        }

        if v.asc {
            return vi < vj
        } else {
            return vi > vj
        }

    }

    func (v *{{.Name}}VectorSorter) lessNotNull(i, j int) bool {
        if v.asc {
            return v.v.Values()[v.order[i]] < v.v.Values()[v.order[j]]
        } else {
            return v.v.Values()[v.order[i]] > v.v.Values()[v.order[j]]
        }
    }

    func (v *{{.Name}}VectorSorter) Less(i, j int) bool {
        return v.less(i, j)
    }

    func (v *{{.Name}}VectorSorter) Swap(i, j int) {
        v.order[i], v.order[j] = v.order[j], v.order[i]
    }
 {{end}}

{{ end }}