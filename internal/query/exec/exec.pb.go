// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exec.proto

package exec

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/any"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
	storage "meerkat/internal/storage"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ErrorCode int32

const (
	ErrorCode_EOF            ErrorCode = 0
	ErrorCode_CANCEL_BY_USER ErrorCode = 1
)

var ErrorCode_name = map[int32]string{
	0: "EOF",
	1: "CANCEL_BY_USER",
}

var ErrorCode_value = map[string]int32{
	"EOF":            0,
	"CANCEL_BY_USER": 1,
}

func (x ErrorCode) String() string {
	return proto.EnumName(ErrorCode_name, int32(x))
}

func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4d737c7315c25422, []int{0}
}

// ExecQuery setup que execution machinery in a node.
type ExecQuery struct {
	// id represents que query id. ( uuid )
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// plan contains the fragments of the query execution plan
	// serialized as gobs
	Plan []byte `protobuf:"bytes,2,opt,name=plan,proto3" json:"plan,omitempty"`
}

func (m *ExecQuery) Reset()         { *m = ExecQuery{} }
func (m *ExecQuery) String() string { return proto.CompactTextString(m) }
func (*ExecQuery) ProtoMessage()    {}
func (*ExecQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d737c7315c25422, []int{0}
}
func (m *ExecQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecQuery.Merge(m, src)
}
func (m *ExecQuery) XXX_Size() int {
	return m.Size()
}
func (m *ExecQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ExecQuery proto.InternalMessageInfo

func (m *ExecQuery) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ExecQuery) GetPlan() []byte {
	if m != nil {
		return m.Plan
	}
	return nil
}

// ExecCancel signal a execution cancellation.
type ExecCancel struct {
	// The error detail.
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ExecCancel) Reset()         { *m = ExecCancel{} }
func (m *ExecCancel) String() string { return proto.CompactTextString(m) }
func (*ExecCancel) ProtoMessage()    {}
func (*ExecCancel) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d737c7315c25422, []int{1}
}
func (m *ExecCancel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecCancel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecCancel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecCancel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecCancel.Merge(m, src)
}
func (m *ExecCancel) XXX_Size() int {
	return m.Size()
}
func (m *ExecCancel) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecCancel.DiscardUnknown(m)
}

var xxx_messageInfo_ExecCancel proto.InternalMessageInfo

func (m *ExecCancel) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

// ExecCmd represents an executor command ( exec query, cancel query, etc)
type ExecCmd struct {
	// Types that are valid to be assigned to Cmd:
	//	*ExecCmd_ExecQuery
	//	*ExecCmd_ExecCancel
	Cmd isExecCmd_Cmd `protobuf_oneof:"cmd"`
}

func (m *ExecCmd) Reset()         { *m = ExecCmd{} }
func (m *ExecCmd) String() string { return proto.CompactTextString(m) }
func (*ExecCmd) ProtoMessage()    {}
func (*ExecCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d737c7315c25422, []int{2}
}
func (m *ExecCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecCmd.Merge(m, src)
}
func (m *ExecCmd) XXX_Size() int {
	return m.Size()
}
func (m *ExecCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecCmd.DiscardUnknown(m)
}

var xxx_messageInfo_ExecCmd proto.InternalMessageInfo

type isExecCmd_Cmd interface {
	isExecCmd_Cmd()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ExecCmd_ExecQuery struct {
	ExecQuery *ExecQuery `protobuf:"bytes,1,opt,name=execQuery,proto3,oneof"`
}
type ExecCmd_ExecCancel struct {
	ExecCancel *ExecCancel `protobuf:"bytes,2,opt,name=execCancel,proto3,oneof"`
}

func (*ExecCmd_ExecQuery) isExecCmd_Cmd()  {}
func (*ExecCmd_ExecCancel) isExecCmd_Cmd() {}

func (m *ExecCmd) GetCmd() isExecCmd_Cmd {
	if m != nil {
		return m.Cmd
	}
	return nil
}

func (m *ExecCmd) GetExecQuery() *ExecQuery {
	if x, ok := m.GetCmd().(*ExecCmd_ExecQuery); ok {
		return x.ExecQuery
	}
	return nil
}

func (m *ExecCmd) GetExecCancel() *ExecCancel {
	if x, ok := m.GetCmd().(*ExecCmd_ExecCancel); ok {
		return x.ExecCancel
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ExecCmd) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ExecCmd_OneofMarshaler, _ExecCmd_OneofUnmarshaler, _ExecCmd_OneofSizer, []interface{}{
		(*ExecCmd_ExecQuery)(nil),
		(*ExecCmd_ExecCancel)(nil),
	}
}

func _ExecCmd_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ExecCmd)
	// cmd
	switch x := m.Cmd.(type) {
	case *ExecCmd_ExecQuery:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ExecQuery); err != nil {
			return err
		}
	case *ExecCmd_ExecCancel:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ExecCancel); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ExecCmd.Cmd has unexpected type %T", x)
	}
	return nil
}

func _ExecCmd_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ExecCmd)
	switch tag {
	case 1: // cmd.execQuery
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExecQuery)
		err := b.DecodeMessage(msg)
		m.Cmd = &ExecCmd_ExecQuery{msg}
		return true, err
	case 2: // cmd.execCancel
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExecCancel)
		err := b.DecodeMessage(msg)
		m.Cmd = &ExecCmd_ExecCancel{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ExecCmd_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ExecCmd)
	// cmd
	switch x := m.Cmd.(type) {
	case *ExecCmd_ExecQuery:
		s := proto.Size(x.ExecQuery)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecCmd_ExecCancel:
		s := proto.Size(x.ExecCancel)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ExecOKEvent signal that the  NodeExecutor was successfully created and started.
type ExecOKEvent struct {
}

func (m *ExecOKEvent) Reset()         { *m = ExecOKEvent{} }
func (m *ExecOKEvent) String() string { return proto.CompactTextString(m) }
func (*ExecOKEvent) ProtoMessage()    {}
func (*ExecOKEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d737c7315c25422, []int{3}
}
func (m *ExecOKEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecOKEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecOKEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecOKEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecOKEvent.Merge(m, src)
}
func (m *ExecOKEvent) XXX_Size() int {
	return m.Size()
}
func (m *ExecOKEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecOKEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ExecOKEvent proto.InternalMessageInfo

// ExecStatsEvent send stats from the node to the coordinator.
type ExecStatsEvent struct {
}

func (m *ExecStatsEvent) Reset()         { *m = ExecStatsEvent{} }
func (m *ExecStatsEvent) String() string { return proto.CompactTextString(m) }
func (*ExecStatsEvent) ProtoMessage()    {}
func (*ExecStatsEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d737c7315c25422, []int{4}
}
func (m *ExecStatsEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecStatsEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecStatsEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecStatsEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecStatsEvent.Merge(m, src)
}
func (m *ExecStatsEvent) XXX_Size() int {
	return m.Size()
}
func (m *ExecStatsEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecStatsEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ExecStatsEvent proto.InternalMessageInfo

// ExecEvent are events that flow from the NodeExecutor to the coordinator.
type ExecEvent struct {
	// Types that are valid to be assigned to Event:
	//	*ExecEvent_ExecOk
	//	*ExecEvent_ExecStats
	//	*ExecEvent_Error
	Event isExecEvent_Event `protobuf_oneof:"event"`
}

func (m *ExecEvent) Reset()         { *m = ExecEvent{} }
func (m *ExecEvent) String() string { return proto.CompactTextString(m) }
func (*ExecEvent) ProtoMessage()    {}
func (*ExecEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d737c7315c25422, []int{5}
}
func (m *ExecEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecEvent.Merge(m, src)
}
func (m *ExecEvent) XXX_Size() int {
	return m.Size()
}
func (m *ExecEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ExecEvent proto.InternalMessageInfo

type isExecEvent_Event interface {
	isExecEvent_Event()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ExecEvent_ExecOk struct {
	ExecOk *ExecOKEvent `protobuf:"bytes,1,opt,name=execOk,proto3,oneof"`
}
type ExecEvent_ExecStats struct {
	ExecStats *ExecStatsEvent `protobuf:"bytes,2,opt,name=execStats,proto3,oneof"`
}
type ExecEvent_Error struct {
	Error *Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*ExecEvent_ExecOk) isExecEvent_Event()    {}
func (*ExecEvent_ExecStats) isExecEvent_Event() {}
func (*ExecEvent_Error) isExecEvent_Event()     {}

func (m *ExecEvent) GetEvent() isExecEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *ExecEvent) GetExecOk() *ExecOKEvent {
	if x, ok := m.GetEvent().(*ExecEvent_ExecOk); ok {
		return x.ExecOk
	}
	return nil
}

func (m *ExecEvent) GetExecStats() *ExecStatsEvent {
	if x, ok := m.GetEvent().(*ExecEvent_ExecStats); ok {
		return x.ExecStats
	}
	return nil
}

func (m *ExecEvent) GetError() *Error {
	if x, ok := m.GetEvent().(*ExecEvent_Error); ok {
		return x.Error
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ExecEvent) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ExecEvent_OneofMarshaler, _ExecEvent_OneofUnmarshaler, _ExecEvent_OneofSizer, []interface{}{
		(*ExecEvent_ExecOk)(nil),
		(*ExecEvent_ExecStats)(nil),
		(*ExecEvent_Error)(nil),
	}
}

func _ExecEvent_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ExecEvent)
	// event
	switch x := m.Event.(type) {
	case *ExecEvent_ExecOk:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ExecOk); err != nil {
			return err
		}
	case *ExecEvent_ExecStats:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ExecStats); err != nil {
			return err
		}
	case *ExecEvent_Error:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ExecEvent.Event has unexpected type %T", x)
	}
	return nil
}

func _ExecEvent_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ExecEvent)
	switch tag {
	case 1: // event.execOk
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExecOKEvent)
		err := b.DecodeMessage(msg)
		m.Event = &ExecEvent_ExecOk{msg}
		return true, err
	case 2: // event.execStats
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExecStatsEvent)
		err := b.DecodeMessage(msg)
		m.Event = &ExecEvent_ExecStats{msg}
		return true, err
	case 3: // event.error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Error)
		err := b.DecodeMessage(msg)
		m.Event = &ExecEvent_Error{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ExecEvent_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ExecEvent)
	// event
	switch x := m.Event.(type) {
	case *ExecEvent_ExecOk:
		s := proto.Size(x.ExecOk)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecEvent_ExecStats:
		s := proto.Size(x.ExecStats)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecEvent_Error:
		s := proto.Size(x.Error)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Column represent a column in the vector batch
type Column struct {
	Name    string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Group   int64              `protobuf:"varint,2,opt,name=group,proto3" json:"group,omitempty"`
	Order   int64              `protobuf:"varint,3,opt,name=order,proto3" json:"order,omitempty"`
	ColType storage.ColumnType `protobuf:"varint,4,opt,name=colType,proto3,enum=meerkat.storage.ColumnType" json:"colType,omitempty"`
	Vector  []byte             `protobuf:"bytes,5,opt,name=vector,proto3" json:"vector,omitempty"`
}

func (m *Column) Reset()         { *m = Column{} }
func (m *Column) String() string { return proto.CompactTextString(m) }
func (*Column) ProtoMessage()    {}
func (*Column) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d737c7315c25422, []int{6}
}
func (m *Column) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Column) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Column.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Column) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Column.Merge(m, src)
}
func (m *Column) XXX_Size() int {
	return m.Size()
}
func (m *Column) XXX_DiscardUnknown() {
	xxx_messageInfo_Column.DiscardUnknown(m)
}

var xxx_messageInfo_Column proto.InternalMessageInfo

func (m *Column) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Column) GetGroup() int64 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *Column) GetOrder() int64 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *Column) GetColType() storage.ColumnType {
	if m != nil {
		return m.ColType
	}
	return storage.ColumnType_TIMESTAMP
}

func (m *Column) GetVector() []byte {
	if m != nil {
		return m.Vector
	}
	return nil
}

// VectorBatch represents the group of vectors exchanged between nodes.
type VectorBatch struct {
	Len     int64     `protobuf:"varint,1,opt,name=len,proto3" json:"len,omitempty"`
	Columns []*Column `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (m *VectorBatch) Reset()         { *m = VectorBatch{} }
func (m *VectorBatch) String() string { return proto.CompactTextString(m) }
func (*VectorBatch) ProtoMessage()    {}
func (*VectorBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d737c7315c25422, []int{7}
}
func (m *VectorBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VectorBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VectorBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VectorBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VectorBatch.Merge(m, src)
}
func (m *VectorBatch) XXX_Size() int {
	return m.Size()
}
func (m *VectorBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_VectorBatch.DiscardUnknown(m)
}

var xxx_messageInfo_VectorBatch proto.InternalMessageInfo

func (m *VectorBatch) GetLen() int64 {
	if m != nil {
		return m.Len
	}
	return 0
}

func (m *VectorBatch) GetColumns() []*Column {
	if m != nil {
		return m.Columns
	}
	return nil
}

// StreamHeader is the first message sent on a VectorExchangeMsg stream. It is used
// to identify the stream targuet exchange operator
type StreamHeader struct {
	QueryId       []byte `protobuf:"bytes,1,opt,name=queryId,proto3" json:"queryId,omitempty"`
	DstFragmentId int64  `protobuf:"varint,2,opt,name=dstFragmentId,proto3" json:"dstFragmentId,omitempty"`
	SrcNode       string `protobuf:"bytes,3,opt,name=srcNode,proto3" json:"srcNode,omitempty"`
	SrcFragmentId int64  `protobuf:"varint,4,opt,name=srcFragmentId,proto3" json:"srcFragmentId,omitempty"`
}

func (m *StreamHeader) Reset()         { *m = StreamHeader{} }
func (m *StreamHeader) String() string { return proto.CompactTextString(m) }
func (*StreamHeader) ProtoMessage()    {}
func (*StreamHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d737c7315c25422, []int{8}
}
func (m *StreamHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamHeader.Merge(m, src)
}
func (m *StreamHeader) XXX_Size() int {
	return m.Size()
}
func (m *StreamHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamHeader.DiscardUnknown(m)
}

var xxx_messageInfo_StreamHeader proto.InternalMessageInfo

func (m *StreamHeader) GetQueryId() []byte {
	if m != nil {
		return m.QueryId
	}
	return nil
}

func (m *StreamHeader) GetDstFragmentId() int64 {
	if m != nil {
		return m.DstFragmentId
	}
	return 0
}

func (m *StreamHeader) GetSrcNode() string {
	if m != nil {
		return m.SrcNode
	}
	return ""
}

func (m *StreamHeader) GetSrcFragmentId() int64 {
	if m != nil {
		return m.SrcFragmentId
	}
	return 0
}

// Error message used to signal errors on streams
type Error struct {
	// id is used to trace errors across nodes. ie to identify
	// root causes of cancellations.
	Id   []byte    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Code ErrorCode `protobuf:"varint,2,opt,name=code,proto3,enum=meerkat.exec.ErrorCode" json:"code,omitempty"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d737c7315c25422, []int{9}
}
func (m *Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return m.Size()
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Error) GetCode() ErrorCode {
	if m != nil {
		return m.Code
	}
	return ErrorCode_EOF
}

// VectorExchangeMsg are the type of messages flowing through
// VectorExchange streams.
type VectorExchangeMsg struct {
	// Types that are valid to be assigned to Msg:
	//	*VectorExchangeMsg_Vector
	//	*VectorExchangeMsg_Header
	//	*VectorExchangeMsg_Error
	Msg isVectorExchangeMsg_Msg `protobuf_oneof:"msg"`
}

func (m *VectorExchangeMsg) Reset()         { *m = VectorExchangeMsg{} }
func (m *VectorExchangeMsg) String() string { return proto.CompactTextString(m) }
func (*VectorExchangeMsg) ProtoMessage()    {}
func (*VectorExchangeMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d737c7315c25422, []int{10}
}
func (m *VectorExchangeMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VectorExchangeMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VectorExchangeMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VectorExchangeMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VectorExchangeMsg.Merge(m, src)
}
func (m *VectorExchangeMsg) XXX_Size() int {
	return m.Size()
}
func (m *VectorExchangeMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_VectorExchangeMsg.DiscardUnknown(m)
}

var xxx_messageInfo_VectorExchangeMsg proto.InternalMessageInfo

type isVectorExchangeMsg_Msg interface {
	isVectorExchangeMsg_Msg()
	MarshalTo([]byte) (int, error)
	Size() int
}

type VectorExchangeMsg_Vector struct {
	Vector *VectorBatch `protobuf:"bytes,1,opt,name=vector,proto3,oneof"`
}
type VectorExchangeMsg_Header struct {
	Header *StreamHeader `protobuf:"bytes,2,opt,name=header,proto3,oneof"`
}
type VectorExchangeMsg_Error struct {
	Error *Error `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*VectorExchangeMsg_Vector) isVectorExchangeMsg_Msg() {}
func (*VectorExchangeMsg_Header) isVectorExchangeMsg_Msg() {}
func (*VectorExchangeMsg_Error) isVectorExchangeMsg_Msg()  {}

func (m *VectorExchangeMsg) GetMsg() isVectorExchangeMsg_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *VectorExchangeMsg) GetVector() *VectorBatch {
	if x, ok := m.GetMsg().(*VectorExchangeMsg_Vector); ok {
		return x.Vector
	}
	return nil
}

func (m *VectorExchangeMsg) GetHeader() *StreamHeader {
	if x, ok := m.GetMsg().(*VectorExchangeMsg_Header); ok {
		return x.Header
	}
	return nil
}

func (m *VectorExchangeMsg) GetError() *Error {
	if x, ok := m.GetMsg().(*VectorExchangeMsg_Error); ok {
		return x.Error
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*VectorExchangeMsg) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _VectorExchangeMsg_OneofMarshaler, _VectorExchangeMsg_OneofUnmarshaler, _VectorExchangeMsg_OneofSizer, []interface{}{
		(*VectorExchangeMsg_Vector)(nil),
		(*VectorExchangeMsg_Header)(nil),
		(*VectorExchangeMsg_Error)(nil),
	}
}

func _VectorExchangeMsg_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*VectorExchangeMsg)
	// msg
	switch x := m.Msg.(type) {
	case *VectorExchangeMsg_Vector:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Vector); err != nil {
			return err
		}
	case *VectorExchangeMsg_Header:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Header); err != nil {
			return err
		}
	case *VectorExchangeMsg_Error:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("VectorExchangeMsg.Msg has unexpected type %T", x)
	}
	return nil
}

func _VectorExchangeMsg_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*VectorExchangeMsg)
	switch tag {
	case 1: // msg.vector
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(VectorBatch)
		err := b.DecodeMessage(msg)
		m.Msg = &VectorExchangeMsg_Vector{msg}
		return true, err
	case 2: // msg.header
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StreamHeader)
		err := b.DecodeMessage(msg)
		m.Msg = &VectorExchangeMsg_Header{msg}
		return true, err
	case 3: // msg.error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Error)
		err := b.DecodeMessage(msg)
		m.Msg = &VectorExchangeMsg_Error{msg}
		return true, err
	default:
		return false, nil
	}
}

func _VectorExchangeMsg_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*VectorExchangeMsg)
	// msg
	switch x := m.Msg.(type) {
	case *VectorExchangeMsg_Vector:
		s := proto.Size(x.Vector)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VectorExchangeMsg_Header:
		s := proto.Size(x.Header)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VectorExchangeMsg_Error:
		s := proto.Size(x.Error)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterEnum("meerkat.exec.ErrorCode", ErrorCode_name, ErrorCode_value)
	proto.RegisterType((*ExecQuery)(nil), "meerkat.exec.ExecQuery")
	proto.RegisterType((*ExecCancel)(nil), "meerkat.exec.ExecCancel")
	proto.RegisterType((*ExecCmd)(nil), "meerkat.exec.ExecCmd")
	proto.RegisterType((*ExecOKEvent)(nil), "meerkat.exec.ExecOKEvent")
	proto.RegisterType((*ExecStatsEvent)(nil), "meerkat.exec.ExecStatsEvent")
	proto.RegisterType((*ExecEvent)(nil), "meerkat.exec.ExecEvent")
	proto.RegisterType((*Column)(nil), "meerkat.exec.Column")
	proto.RegisterType((*VectorBatch)(nil), "meerkat.exec.VectorBatch")
	proto.RegisterType((*StreamHeader)(nil), "meerkat.exec.StreamHeader")
	proto.RegisterType((*Error)(nil), "meerkat.exec.Error")
	proto.RegisterType((*VectorExchangeMsg)(nil), "meerkat.exec.VectorExchangeMsg")
}

func init() { proto.RegisterFile("exec.proto", fileDescriptor_4d737c7315c25422) }

var fileDescriptor_4d737c7315c25422 = []byte{
	// 722 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0x13, 0x3b,
	0x18, 0x1d, 0x67, 0xf2, 0x73, 0xf3, 0xa5, 0x8d, 0x72, 0x7d, 0x7b, 0x69, 0x9a, 0xa2, 0xb4, 0x1a,
	0xb1, 0x08, 0x54, 0x4a, 0x50, 0x4a, 0x55, 0x09, 0xc1, 0x82, 0x84, 0x54, 0xa9, 0x80, 0x46, 0xb8,
	0x80, 0x04, 0x9b, 0xca, 0x9d, 0x31, 0xd3, 0xa8, 0x33, 0xe3, 0xe0, 0x71, 0xaa, 0xf6, 0x01, 0xd8,
	0x22, 0x24, 0x16, 0xbc, 0x07, 0xe2, 0x21, 0x58, 0x76, 0xc9, 0x12, 0xb5, 0x2f, 0x82, 0x6c, 0xcf,
	0xb4, 0x49, 0x13, 0x16, 0xec, 0xfc, 0x7d, 0x3e, 0xc7, 0xdf, 0xf1, 0x99, 0xe3, 0x01, 0x60, 0xa7,
	0xcc, 0x6d, 0x8e, 0x04, 0x97, 0x1c, 0x2f, 0x84, 0x8c, 0x89, 0x63, 0x2a, 0x9b, 0xaa, 0x57, 0x5b,
	0xf2, 0xb9, 0xcf, 0xf5, 0x46, 0x4b, 0xad, 0x0c, 0xa6, 0xb6, 0xe6, 0x73, 0xee, 0x07, 0xac, 0xa5,
	0xab, 0xc3, 0xf1, 0xfb, 0x96, 0x1c, 0x86, 0x2c, 0x96, 0x34, 0x1c, 0x25, 0x80, 0x95, 0x9b, 0x00,
	0x1a, 0x9d, 0x25, 0x5b, 0x8b, 0xb1, 0xe4, 0x82, 0xfa, 0xcc, 0x94, 0x4e, 0x0b, 0x8a, 0xbd, 0x53,
	0xe6, 0xbe, 0x1c, 0x33, 0x71, 0x86, 0xcb, 0x90, 0x19, 0x7a, 0x55, 0xb4, 0x8e, 0x1a, 0x0b, 0x24,
	0x33, 0xf4, 0x30, 0x86, 0xec, 0x28, 0xa0, 0x51, 0x35, 0xa3, 0x3b, 0x7a, 0xed, 0x6c, 0x03, 0x28,
	0x42, 0x97, 0x46, 0x2e, 0x0b, 0xf0, 0x5d, 0xc8, 0x31, 0x21, 0xb8, 0xd0, 0xa4, 0x52, 0xfb, 0xbf,
	0xe6, 0xa4, 0xfa, 0x66, 0x4f, 0x6d, 0x11, 0x83, 0x70, 0x3e, 0x22, 0x28, 0x68, 0x66, 0xe8, 0xe1,
	0x6d, 0x28, 0xb2, 0x74, 0x6a, 0x42, 0x5d, 0xbe, 0x41, 0x4d, 0xb7, 0xfb, 0x16, 0xb9, 0xc6, 0xe2,
	0x87, 0xc6, 0x2b, 0x33, 0x5d, 0xeb, 0x2a, 0xb5, 0xab, 0xb3, 0x4c, 0xb3, 0xdf, 0xb7, 0xc8, 0x04,
	0xba, 0x93, 0x03, 0xdb, 0x0d, 0x3d, 0x67, 0x11, 0x4a, 0x0a, 0x32, 0x78, 0xd6, 0x3b, 0x61, 0x91,
	0x74, 0x2a, 0x50, 0x56, 0xe5, 0xbe, 0xa4, 0x32, 0x36, 0x9d, 0xef, 0xc8, 0x78, 0xa2, 0x2b, 0xbc,
	0x09, 0x79, 0x75, 0xc6, 0xe0, 0x38, 0xd1, 0xb9, 0x32, 0x3b, 0x2d, 0x39, 0xaa, 0x6f, 0x91, 0x04,
	0x8a, 0x1f, 0x99, 0xfb, 0xe9, 0x43, 0x13, 0x95, 0xb7, 0x67, 0x79, 0xd7, 0x33, 0xd3, 0x4b, 0xea,
	0x0e, 0xde, 0x48, 0x4d, 0xb5, 0xff, 0x68, 0x6a, 0xdf, 0x4a, 0x6c, 0xed, 0x14, 0x20, 0xc7, 0xb4,
	0xec, 0xaf, 0x08, 0xf2, 0x5d, 0x1e, 0x8c, 0xc3, 0x48, 0x7d, 0xb7, 0x88, 0x86, 0x4c, 0x2b, 0x2e,
	0x12, 0xbd, 0xc6, 0x4b, 0x90, 0xf3, 0x05, 0x1f, 0x8f, 0xb4, 0x1c, 0x9b, 0x98, 0x42, 0x75, 0xb9,
	0xf0, 0x98, 0x19, 0x65, 0x13, 0x53, 0xe0, 0x2d, 0x28, 0xb8, 0x3c, 0x78, 0x75, 0x36, 0x62, 0xd5,
	0xec, 0x3a, 0x6a, 0x94, 0xdb, 0xab, 0x57, 0x12, 0xd2, 0xf4, 0x98, 0x49, 0x0a, 0x42, 0x52, 0x2c,
	0xbe, 0x05, 0xf9, 0x13, 0xe6, 0x4a, 0x2e, 0xaa, 0x39, 0x1d, 0x98, 0xa4, 0x72, 0x06, 0x50, 0x7a,
	0xa3, 0x57, 0x1d, 0x2a, 0xdd, 0x23, 0x5c, 0x01, 0x3b, 0x60, 0x91, 0x16, 0x67, 0x13, 0xb5, 0xc4,
	0x4d, 0x3d, 0x6f, 0x1c, 0x46, 0xca, 0x2c, 0xbb, 0x51, 0x6a, 0x2f, 0x4d, 0x5f, 0xd9, 0x0c, 0x23,
	0x29, 0xc8, 0xf9, 0x84, 0x60, 0x61, 0x5f, 0x0a, 0x46, 0xc3, 0x3e, 0xa3, 0x4a, 0x70, 0x15, 0x0a,
	0x1f, 0x54, 0x3e, 0x76, 0xd3, 0xf4, 0xa6, 0x25, 0xbe, 0x03, 0x8b, 0x5e, 0x2c, 0x77, 0x04, 0xf5,
	0x43, 0x16, 0xc9, 0x5d, 0x2f, 0xb9, 0xfe, 0x74, 0x53, 0xf1, 0x63, 0xe1, 0xee, 0x71, 0x8f, 0x69,
	0x23, 0x8a, 0x24, 0x2d, 0x15, 0x3f, 0x16, 0xee, 0x04, 0x3f, 0x6b, 0xf8, 0x53, 0x4d, 0xe7, 0x29,
	0xe4, 0xf4, 0x67, 0x99, 0x79, 0x41, 0x1b, 0x90, 0x75, 0xd5, 0xa9, 0x19, 0x6d, 0xe3, 0xf2, 0x9c,
	0x2f, 0xd9, 0xe5, 0x1e, 0x23, 0x1a, 0xe4, 0x7c, 0x43, 0xf0, 0xaf, 0x31, 0xaa, 0x77, 0xea, 0x1e,
	0xd1, 0xc8, 0x67, 0x2f, 0x62, 0x5f, 0x05, 0x30, 0x71, 0x75, 0x6e, 0x00, 0x27, 0x9c, 0x55, 0x01,
	0x34, 0x50, 0xfc, 0x00, 0xf2, 0x47, 0xda, 0x9a, 0x24, 0x7d, 0xb5, 0x69, 0xd2, 0xa4, 0x79, 0x8a,
	0x65, 0xb0, 0x7f, 0x17, 0xbc, 0x1c, 0xd8, 0x61, 0xec, 0xdf, 0x6b, 0x40, 0xf1, 0xea, 0x1e, 0xb8,
	0x00, 0x76, 0x6f, 0xb0, 0x53, 0xb1, 0x30, 0x86, 0x72, 0xf7, 0xc9, 0x5e, 0xb7, 0xf7, 0xfc, 0xa0,
	0xf3, 0xf6, 0xe0, 0xf5, 0x7e, 0x8f, 0x54, 0x50, 0xfb, 0x0b, 0x82, 0x7f, 0x54, 0xec, 0xc7, 0x4a,
	0xe0, 0x63, 0x28, 0x74, 0x79, 0x24, 0x05, 0x0f, 0xf0, 0xff, 0x73, 0xde, 0x6f, 0xe8, 0xd5, 0xe6,
	0xfc, 0x10, 0xf4, 0x5b, 0x69, 0xa0, 0xfb, 0x08, 0xf7, 0xa1, 0x3c, 0xed, 0x14, 0x5e, 0x9b, 0x67,
	0xcb, 0x84, 0x8f, 0xb5, 0x79, 0xb7, 0x69, 0xa0, 0xce, 0xd6, 0x8f, 0x8b, 0x3a, 0x3a, 0xbf, 0xa8,
	0xa3, 0x5f, 0x17, 0x75, 0xf4, 0xf9, 0xb2, 0x6e, 0x9d, 0x5f, 0xd6, 0xad, 0x9f, 0x97, 0x75, 0xeb,
	0xdd, 0x6a, 0x82, 0x6f, 0x0d, 0x23, 0xc9, 0x44, 0x44, 0x83, 0x96, 0x0e, 0x55, 0x4b, 0xd1, 0x0f,
	0xf3, 0xfa, 0xf7, 0xb9, 0xf9, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xfb, 0x54, 0x29, 0x6f, 0xbb, 0x05,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ExecutorClient is the client API for Executor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExecutorClient interface {
	// Control stream is used by the coordinator to execute query
	// plan fragments on cluster nodes.
	Control(ctx context.Context, opts ...grpc.CallOption) (Executor_ControlClient, error)
	// VectorExchange is used to push vectors to a specific node.
	VectorExchange(ctx context.Context, opts ...grpc.CallOption) (Executor_VectorExchangeClient, error)
}

type executorClient struct {
	cc *grpc.ClientConn
}

func NewExecutorClient(cc *grpc.ClientConn) ExecutorClient {
	return &executorClient{cc}
}

func (c *executorClient) Control(ctx context.Context, opts ...grpc.CallOption) (Executor_ControlClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Executor_serviceDesc.Streams[0], "/meerkat.exec.Executor/Control", opts...)
	if err != nil {
		return nil, err
	}
	x := &executorControlClient{stream}
	return x, nil
}

type Executor_ControlClient interface {
	Send(*ExecCmd) error
	Recv() (*ExecEvent, error)
	grpc.ClientStream
}

type executorControlClient struct {
	grpc.ClientStream
}

func (x *executorControlClient) Send(m *ExecCmd) error {
	return x.ClientStream.SendMsg(m)
}

func (x *executorControlClient) Recv() (*ExecEvent, error) {
	m := new(ExecEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *executorClient) VectorExchange(ctx context.Context, opts ...grpc.CallOption) (Executor_VectorExchangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Executor_serviceDesc.Streams[1], "/meerkat.exec.Executor/VectorExchange", opts...)
	if err != nil {
		return nil, err
	}
	x := &executorVectorExchangeClient{stream}
	return x, nil
}

type Executor_VectorExchangeClient interface {
	Send(*VectorExchangeMsg) error
	CloseAndRecv() (*Error, error)
	grpc.ClientStream
}

type executorVectorExchangeClient struct {
	grpc.ClientStream
}

func (x *executorVectorExchangeClient) Send(m *VectorExchangeMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *executorVectorExchangeClient) CloseAndRecv() (*Error, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Error)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExecutorServer is the server API for Executor service.
type ExecutorServer interface {
	// Control stream is used by the coordinator to execute query
	// plan fragments on cluster nodes.
	Control(Executor_ControlServer) error
	// VectorExchange is used to push vectors to a specific node.
	VectorExchange(Executor_VectorExchangeServer) error
}

func RegisterExecutorServer(s *grpc.Server, srv ExecutorServer) {
	s.RegisterService(&_Executor_serviceDesc, srv)
}

func _Executor_Control_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExecutorServer).Control(&executorControlServer{stream})
}

type Executor_ControlServer interface {
	Send(*ExecEvent) error
	Recv() (*ExecCmd, error)
	grpc.ServerStream
}

type executorControlServer struct {
	grpc.ServerStream
}

func (x *executorControlServer) Send(m *ExecEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *executorControlServer) Recv() (*ExecCmd, error) {
	m := new(ExecCmd)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Executor_VectorExchange_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExecutorServer).VectorExchange(&executorVectorExchangeServer{stream})
}

type Executor_VectorExchangeServer interface {
	SendAndClose(*Error) error
	Recv() (*VectorExchangeMsg, error)
	grpc.ServerStream
}

type executorVectorExchangeServer struct {
	grpc.ServerStream
}

func (x *executorVectorExchangeServer) SendAndClose(m *Error) error {
	return x.ServerStream.SendMsg(m)
}

func (x *executorVectorExchangeServer) Recv() (*VectorExchangeMsg, error) {
	m := new(VectorExchangeMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Executor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "meerkat.exec.Executor",
	HandlerType: (*ExecutorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Control",
			Handler:       _Executor_Control_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "VectorExchange",
			Handler:       _Executor_VectorExchange_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "exec.proto",
}

func (m *ExecQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecQuery) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExec(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Plan) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExec(dAtA, i, uint64(len(m.Plan)))
		i += copy(dAtA[i:], m.Plan)
	}
	return i, nil
}

func (m *ExecCancel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecCancel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExec(dAtA, i, uint64(m.Error.Size()))
		n1, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *ExecCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecCmd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cmd != nil {
		nn2, err := m.Cmd.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	return i, nil
}

func (m *ExecCmd_ExecQuery) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ExecQuery != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExec(dAtA, i, uint64(m.ExecQuery.Size()))
		n3, err := m.ExecQuery.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *ExecCmd_ExecCancel) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ExecCancel != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExec(dAtA, i, uint64(m.ExecCancel.Size()))
		n4, err := m.ExecCancel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *ExecOKEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecOKEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ExecStatsEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecStatsEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ExecEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		nn5, err := m.Event.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn5
	}
	return i, nil
}

func (m *ExecEvent_ExecOk) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ExecOk != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExec(dAtA, i, uint64(m.ExecOk.Size()))
		n6, err := m.ExecOk.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *ExecEvent_ExecStats) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ExecStats != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExec(dAtA, i, uint64(m.ExecStats.Size()))
		n7, err := m.ExecStats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *ExecEvent_Error) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Error != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintExec(dAtA, i, uint64(m.Error.Size()))
		n8, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *Column) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Column) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExec(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Group != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintExec(dAtA, i, uint64(m.Group))
	}
	if m.Order != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintExec(dAtA, i, uint64(m.Order))
	}
	if m.ColType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintExec(dAtA, i, uint64(m.ColType))
	}
	if len(m.Vector) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintExec(dAtA, i, uint64(len(m.Vector)))
		i += copy(dAtA[i:], m.Vector)
	}
	return i, nil
}

func (m *VectorBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VectorBatch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Len != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintExec(dAtA, i, uint64(m.Len))
	}
	if len(m.Columns) > 0 {
		for _, msg := range m.Columns {
			dAtA[i] = 0x12
			i++
			i = encodeVarintExec(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *StreamHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.QueryId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExec(dAtA, i, uint64(len(m.QueryId)))
		i += copy(dAtA[i:], m.QueryId)
	}
	if m.DstFragmentId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintExec(dAtA, i, uint64(m.DstFragmentId))
	}
	if len(m.SrcNode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintExec(dAtA, i, uint64(len(m.SrcNode)))
		i += copy(dAtA[i:], m.SrcNode)
	}
	if m.SrcFragmentId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintExec(dAtA, i, uint64(m.SrcFragmentId))
	}
	return i, nil
}

func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExec(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Code != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintExec(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *VectorExchangeMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VectorExchangeMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		nn9, err := m.Msg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn9
	}
	return i, nil
}

func (m *VectorExchangeMsg_Vector) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Vector != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintExec(dAtA, i, uint64(m.Vector.Size()))
		n10, err := m.Vector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *VectorExchangeMsg_Header) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Header != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintExec(dAtA, i, uint64(m.Header.Size()))
		n11, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *VectorExchangeMsg_Error) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Error != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintExec(dAtA, i, uint64(m.Error.Size()))
		n12, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func encodeVarintExec(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ExecQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovExec(uint64(l))
	}
	l = len(m.Plan)
	if l > 0 {
		n += 1 + l + sovExec(uint64(l))
	}
	return n
}

func (m *ExecCancel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovExec(uint64(l))
	}
	return n
}

func (m *ExecCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cmd != nil {
		n += m.Cmd.Size()
	}
	return n
}

func (m *ExecCmd_ExecQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExecQuery != nil {
		l = m.ExecQuery.Size()
		n += 1 + l + sovExec(uint64(l))
	}
	return n
}
func (m *ExecCmd_ExecCancel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExecCancel != nil {
		l = m.ExecCancel.Size()
		n += 1 + l + sovExec(uint64(l))
	}
	return n
}
func (m *ExecOKEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ExecStatsEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ExecEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		n += m.Event.Size()
	}
	return n
}

func (m *ExecEvent_ExecOk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExecOk != nil {
		l = m.ExecOk.Size()
		n += 1 + l + sovExec(uint64(l))
	}
	return n
}
func (m *ExecEvent_ExecStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExecStats != nil {
		l = m.ExecStats.Size()
		n += 1 + l + sovExec(uint64(l))
	}
	return n
}
func (m *ExecEvent_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovExec(uint64(l))
	}
	return n
}
func (m *Column) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovExec(uint64(l))
	}
	if m.Group != 0 {
		n += 1 + sovExec(uint64(m.Group))
	}
	if m.Order != 0 {
		n += 1 + sovExec(uint64(m.Order))
	}
	if m.ColType != 0 {
		n += 1 + sovExec(uint64(m.ColType))
	}
	l = len(m.Vector)
	if l > 0 {
		n += 1 + l + sovExec(uint64(l))
	}
	return n
}

func (m *VectorBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Len != 0 {
		n += 1 + sovExec(uint64(m.Len))
	}
	if len(m.Columns) > 0 {
		for _, e := range m.Columns {
			l = e.Size()
			n += 1 + l + sovExec(uint64(l))
		}
	}
	return n
}

func (m *StreamHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QueryId)
	if l > 0 {
		n += 1 + l + sovExec(uint64(l))
	}
	if m.DstFragmentId != 0 {
		n += 1 + sovExec(uint64(m.DstFragmentId))
	}
	l = len(m.SrcNode)
	if l > 0 {
		n += 1 + l + sovExec(uint64(l))
	}
	if m.SrcFragmentId != 0 {
		n += 1 + sovExec(uint64(m.SrcFragmentId))
	}
	return n
}

func (m *Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovExec(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovExec(uint64(m.Code))
	}
	return n
}

func (m *VectorExchangeMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		n += m.Msg.Size()
	}
	return n
}

func (m *VectorExchangeMsg_Vector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vector != nil {
		l = m.Vector.Size()
		n += 1 + l + sovExec(uint64(l))
	}
	return n
}
func (m *VectorExchangeMsg_Header) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovExec(uint64(l))
	}
	return n
}
func (m *VectorExchangeMsg_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovExec(uint64(l))
	}
	return n
}

func sovExec(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozExec(x uint64) (n int) {
	return sovExec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExecQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plan", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Plan = append(m.Plan[:0], dAtA[iNdEx:postIndex]...)
			if m.Plan == nil {
				m.Plan = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecCancel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecCancel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecCancel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecQuery", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExecQuery{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cmd = &ExecCmd_ExecQuery{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecCancel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExecCancel{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Cmd = &ExecCmd_ExecCancel{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecOKEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecOKEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecOKEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecStatsEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecStatsEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecStatsEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecOk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExecOKEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &ExecEvent_ExecOk{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExecStatsEvent{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &ExecEvent_ExecStats{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Error{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &ExecEvent_Error{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Column) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Column: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Column: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			m.Group = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Group |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColType", wireType)
			}
			m.ColType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColType |= storage.ColumnType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vector", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vector = append(m.Vector[:0], dAtA[iNdEx:postIndex]...)
			if m.Vector == nil {
				m.Vector = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VectorBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VectorBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VectorBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Len", wireType)
			}
			m.Len = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Len |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Columns = append(m.Columns, &Column{})
			if err := m.Columns[len(m.Columns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryId = append(m.QueryId[:0], dAtA[iNdEx:postIndex]...)
			if m.QueryId == nil {
				m.QueryId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstFragmentId", wireType)
			}
			m.DstFragmentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstFragmentId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcNode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcNode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcFragmentId", wireType)
			}
			m.SrcFragmentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcFragmentId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VectorExchangeMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VectorExchangeMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VectorExchangeMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VectorBatch{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &VectorExchangeMsg_Vector{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StreamHeader{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &VectorExchangeMsg_Header{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Error{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &VectorExchangeMsg_Error{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExec
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthExec
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowExec
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipExec(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthExec
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthExec = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExec   = fmt.Errorf("proto: integer overflow")
)
