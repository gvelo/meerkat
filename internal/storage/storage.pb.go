// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage.proto

package storage

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ColumnType int32

const (
	// a column of type timestamp. Timestamp represent time as
	// the number of nanoseconds elapsed since January 1, 1970 UTC
	ColumnType_TIMESTAMP ColumnType = 0
	// a datetime column type. Datetime columns are compatible with
	// Kusto datetime type. Time values are measured in 100-nanosecond
	// units called ticks, and a particular date is the number of ticks
	// since 12:00 midnight, January 1, 0001 A.D. (C.E.) in the
	// GregorianCalendar calendar (excluding ticks that would be added
	// by leap seconds). For example, a ticks value of
	// 31241376000000000 represents the date, Friday, January 01, 0100 12:00:00 midnight.
	// This is sometimes called "a moment in linear time".
	ColumnType_DATETIME ColumnType = 1
	// a column of type bool
	ColumnType_BOOL ColumnType = 2
	// a column of type int32 ( int )
	ColumnType_INT32 ColumnType = 3
	// a column of type int64 ( long )
	ColumnType_INT64 ColumnType = 4
	// a column of type float64 ( real )
	ColumnType_FLOAT64 ColumnType = 5
	// a column of type String
	ColumnType_STRING ColumnType = 6
	// a column of type dynamic
	ColumnType_DYNAMIC ColumnType = 7
	// a column of type UUID
	ColumnType_GUID ColumnType = 8
)

var ColumnType_name = map[int32]string{
	0: "TIMESTAMP",
	1: "DATETIME",
	2: "BOOL",
	3: "INT32",
	4: "INT64",
	5: "FLOAT64",
	6: "STRING",
	7: "DYNAMIC",
	8: "GUID",
}

var ColumnType_value = map[string]int32{
	"TIMESTAMP": 0,
	"DATETIME":  1,
	"BOOL":      2,
	"INT32":     3,
	"INT64":     4,
	"FLOAT64":   5,
	"STRING":    6,
	"DYNAMIC":   7,
	"GUID":      8,
}

func (x ColumnType) String() string {
	return proto.EnumName(ColumnType_name, int32(x))
}

func (ColumnType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{0}
}

type IndexType int32

const (
	// The column is not indexed.
	IndexType_NONE IndexType = 0
	// The column is indexed using a full text index.
	IndexType_FULLTEXT IndexType = 1
	// The column is indexed using a string index (trie).
	IndexType_TRIE IndexType = 2
	// The column is indexed using a range index.
	IndexType_RANGE IndexType = 4
)

var IndexType_name = map[int32]string{
	0: "NONE",
	1: "FULLTEXT",
	2: "TRIE",
	4: "RANGE",
}

var IndexType_value = map[string]int32{
	"NONE":     0,
	"FULLTEXT": 1,
	"TRIE":     2,
	"RANGE":    4,
}

func (x IndexType) String() string {
	return proto.EnumName(IndexType_name, int32(x))
}

func (IndexType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{1}
}

type Encoding int32

const (
	Encoding_PLAIN          Encoding = 0
	Encoding_SNAPPY         Encoding = 1
	Encoding_DICT           Encoding = 2
	Encoding_DICT_BITPACKED Encoding = 3
)

var Encoding_name = map[int32]string{
	0: "PLAIN",
	1: "SNAPPY",
	2: "DICT",
	3: "DICT_BITPACKED",
}

var Encoding_value = map[string]int32{
	"PLAIN":          0,
	"SNAPPY":         1,
	"DICT":           2,
	"DICT_BITPACKED": 3,
}

func (x Encoding) String() string {
	return proto.EnumName(Encoding_name, int32(x))
}

func (Encoding) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{2}
}

type ColumnInfo struct {
	Name           string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ColumnType     ColumnType `protobuf:"varint,2,opt,name=column_type,json=columnType,proto3,enum=meerkat.storage.ColumnType" json:"column_type,omitempty"`
	IndexType      IndexType  `protobuf:"varint,3,opt,name=index_type,json=indexType,proto3,enum=meerkat.storage.IndexType" json:"index_type,omitempty"`
	Encoding       Encoding   `protobuf:"varint,4,opt,name=encoding,proto3,enum=meerkat.storage.Encoding" json:"encoding,omitempty"`
	Nullable       bool       `protobuf:"varint,5,opt,name=nullable,proto3" json:"nullable,omitempty"`
	Len            uint32     `protobuf:"varint,6,opt,name=len,proto3" json:"len,omitempty"`
	Cardinality    uint64     `protobuf:"varint,7,opt,name=cardinality,proto3" json:"cardinality,omitempty"`
	SizeOnDisk     uint64     `protobuf:"varint,8,opt,name=size_on_disk,json=sizeOnDisk,proto3" json:"size_on_disk,omitempty"`
	CompressedSize uint64     `protobuf:"varint,9,opt,name=compressed_size,json=compressedSize,proto3" json:"compressed_size,omitempty"`
	NullCount      uint32     `protobuf:"varint,10,opt,name=null_count,json=nullCount,proto3" json:"null_count,omitempty"`
}

func (m *ColumnInfo) Reset()         { *m = ColumnInfo{} }
func (m *ColumnInfo) String() string { return proto.CompactTextString(m) }
func (*ColumnInfo) ProtoMessage()    {}
func (*ColumnInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{0}
}
func (m *ColumnInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ColumnInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ColumnInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ColumnInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColumnInfo.Merge(m, src)
}
func (m *ColumnInfo) XXX_Size() int {
	return m.Size()
}
func (m *ColumnInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ColumnInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ColumnInfo proto.InternalMessageInfo

func (m *ColumnInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ColumnInfo) GetColumnType() ColumnType {
	if m != nil {
		return m.ColumnType
	}
	return ColumnType_TIMESTAMP
}

func (m *ColumnInfo) GetIndexType() IndexType {
	if m != nil {
		return m.IndexType
	}
	return IndexType_NONE
}

func (m *ColumnInfo) GetEncoding() Encoding {
	if m != nil {
		return m.Encoding
	}
	return Encoding_PLAIN
}

func (m *ColumnInfo) GetNullable() bool {
	if m != nil {
		return m.Nullable
	}
	return false
}

func (m *ColumnInfo) GetLen() uint32 {
	if m != nil {
		return m.Len
	}
	return 0
}

func (m *ColumnInfo) GetCardinality() uint64 {
	if m != nil {
		return m.Cardinality
	}
	return 0
}

func (m *ColumnInfo) GetSizeOnDisk() uint64 {
	if m != nil {
		return m.SizeOnDisk
	}
	return 0
}

func (m *ColumnInfo) GetCompressedSize() uint64 {
	if m != nil {
		return m.CompressedSize
	}
	return 0
}

func (m *ColumnInfo) GetNullCount() uint32 {
	if m != nil {
		return m.NullCount
	}
	return 0
}

type SegmentInfo struct {
	Id           []byte        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DatabaseName string        `protobuf:"bytes,2,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	TableName    string        `protobuf:"bytes,3,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	PartitionId  uint64        `protobuf:"varint,4,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	Len          uint32        `protobuf:"varint,5,opt,name=len,proto3" json:"len,omitempty"`
	Interval     *Interval     `protobuf:"bytes,6,opt,name=interval,proto3" json:"interval,omitempty"`
	Columns      []*ColumnInfo `protobuf:"bytes,7,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (m *SegmentInfo) Reset()         { *m = SegmentInfo{} }
func (m *SegmentInfo) String() string { return proto.CompactTextString(m) }
func (*SegmentInfo) ProtoMessage()    {}
func (*SegmentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{1}
}
func (m *SegmentInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SegmentInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SegmentInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SegmentInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentInfo.Merge(m, src)
}
func (m *SegmentInfo) XXX_Size() int {
	return m.Size()
}
func (m *SegmentInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentInfo proto.InternalMessageInfo

func (m *SegmentInfo) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *SegmentInfo) GetDatabaseName() string {
	if m != nil {
		return m.DatabaseName
	}
	return ""
}

func (m *SegmentInfo) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *SegmentInfo) GetPartitionId() uint64 {
	if m != nil {
		return m.PartitionId
	}
	return 0
}

func (m *SegmentInfo) GetLen() uint32 {
	if m != nil {
		return m.Len
	}
	return 0
}

func (m *SegmentInfo) GetInterval() *Interval {
	if m != nil {
		return m.Interval
	}
	return nil
}

func (m *SegmentInfo) GetColumns() []*ColumnInfo {
	if m != nil {
		return m.Columns
	}
	return nil
}

type Interval struct {
	From time.Time `protobuf:"bytes,1,opt,name=from,proto3,stdtime" json:"from"`
	To   time.Time `protobuf:"bytes,2,opt,name=to,proto3,stdtime" json:"to"`
}

func (m *Interval) Reset()         { *m = Interval{} }
func (m *Interval) String() string { return proto.CompactTextString(m) }
func (*Interval) ProtoMessage()    {}
func (*Interval) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d2c4ccf1453ffdb, []int{2}
}
func (m *Interval) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Interval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Interval.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Interval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Interval.Merge(m, src)
}
func (m *Interval) XXX_Size() int {
	return m.Size()
}
func (m *Interval) XXX_DiscardUnknown() {
	xxx_messageInfo_Interval.DiscardUnknown(m)
}

var xxx_messageInfo_Interval proto.InternalMessageInfo

func (m *Interval) GetFrom() time.Time {
	if m != nil {
		return m.From
	}
	return time.Time{}
}

func (m *Interval) GetTo() time.Time {
	if m != nil {
		return m.To
	}
	return time.Time{}
}

func init() {
	proto.RegisterEnum("meerkat.storage.ColumnType", ColumnType_name, ColumnType_value)
	proto.RegisterEnum("meerkat.storage.IndexType", IndexType_name, IndexType_value)
	proto.RegisterEnum("meerkat.storage.Encoding", Encoding_name, Encoding_value)
	proto.RegisterType((*ColumnInfo)(nil), "meerkat.storage.ColumnInfo")
	proto.RegisterType((*SegmentInfo)(nil), "meerkat.storage.SegmentInfo")
	proto.RegisterType((*Interval)(nil), "meerkat.storage.Interval")
}

func init() { proto.RegisterFile("storage.proto", fileDescriptor_0d2c4ccf1453ffdb) }

var fileDescriptor_0d2c4ccf1453ffdb = []byte{
	// 713 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x41, 0x6b, 0xe3, 0x46,
	0x18, 0xb5, 0x64, 0x25, 0x96, 0x3e, 0x39, 0x5e, 0x31, 0xf4, 0xa0, 0xba, 0xac, 0xa3, 0xa6, 0x87,
	0x9a, 0x1c, 0x6c, 0xf0, 0x6e, 0xca, 0x16, 0x0a, 0x45, 0xb6, 0xb5, 0x41, 0xd4, 0x91, 0x8d, 0xac,
	0x85, 0x6e, 0x2f, 0x42, 0xb6, 0x26, 0x66, 0x88, 0x34, 0x63, 0xa4, 0x71, 0xa9, 0x73, 0xee, 0xa9,
	0xa7, 0xfd, 0x59, 0x7b, 0xdc, 0x63, 0x4f, 0x6d, 0x49, 0xfe, 0x48, 0x99, 0x91, 0xe5, 0x2d, 0x4d,
	0x0b, 0x7b, 0xfb, 0xe6, 0xcd, 0x7b, 0xf3, 0xcd, 0xbc, 0xf7, 0x0d, 0x9c, 0x95, 0x9c, 0x15, 0xc9,
	0x06, 0x0f, 0xb6, 0x05, 0xe3, 0x0c, 0x3d, 0xcb, 0x31, 0x2e, 0xee, 0x12, 0x3e, 0x38, 0xc0, 0xdd,
	0xcf, 0x36, 0x6c, 0xc3, 0xe4, 0xde, 0x50, 0x54, 0x15, 0xad, 0x7b, 0xbe, 0x61, 0x6c, 0x93, 0xe1,
	0xa1, 0x5c, 0xad, 0x76, 0xb7, 0x43, 0x4e, 0x72, 0x5c, 0xf2, 0x24, 0xdf, 0x56, 0x84, 0x8b, 0xdf,
	0x9a, 0x00, 0x13, 0x96, 0xed, 0x72, 0xea, 0xd3, 0x5b, 0x86, 0x10, 0x68, 0x34, 0xc9, 0xb1, 0xad,
	0x38, 0x4a, 0xdf, 0x08, 0x65, 0x8d, 0xbe, 0x03, 0x73, 0x2d, 0x19, 0x31, 0xdf, 0x6f, 0xb1, 0xad,
	0x3a, 0x4a, 0xbf, 0x33, 0xfa, 0x62, 0xf0, 0xaf, 0x0b, 0x0c, 0xaa, 0x53, 0xa2, 0xfd, 0x16, 0x87,
	0xb0, 0x3e, 0xd6, 0xe8, 0x5b, 0x00, 0x42, 0x53, 0xfc, 0x4b, 0x25, 0x6e, 0x4a, 0x71, 0xf7, 0x89,
	0xd8, 0x17, 0x14, 0xa9, 0x35, 0x48, 0x5d, 0xa2, 0x2b, 0xd0, 0x31, 0x5d, 0xb3, 0x94, 0xd0, 0x8d,
	0xad, 0x49, 0xe1, 0xe7, 0x4f, 0x84, 0xde, 0x81, 0x10, 0x1e, 0xa9, 0xa8, 0x0b, 0x3a, 0xdd, 0x65,
	0x59, 0xb2, 0xca, 0xb0, 0x7d, 0xe2, 0x28, 0x7d, 0x3d, 0x3c, 0xae, 0x91, 0x05, 0xcd, 0x0c, 0x53,
	0xfb, 0xd4, 0x51, 0xfa, 0x67, 0xa1, 0x28, 0x91, 0x03, 0xe6, 0x3a, 0x29, 0x52, 0x42, 0x93, 0x8c,
	0xf0, 0xbd, 0xdd, 0x72, 0x94, 0xbe, 0x16, 0xfe, 0x13, 0x42, 0x0e, 0xb4, 0x4b, 0x72, 0x8f, 0x63,
	0x46, 0xe3, 0x94, 0x94, 0x77, 0xb6, 0x2e, 0x29, 0x20, 0xb0, 0x39, 0x9d, 0x92, 0xf2, 0x0e, 0x7d,
	0x0d, 0xcf, 0xd6, 0x2c, 0xdf, 0x16, 0xb8, 0x2c, 0x71, 0x1a, 0x8b, 0x0d, 0xdb, 0x90, 0xa4, 0xce,
	0x47, 0x78, 0x49, 0xee, 0x31, 0x7a, 0x0e, 0x20, 0xae, 0x12, 0xaf, 0xd9, 0x8e, 0x72, 0x1b, 0xe4,
	0x2d, 0x0c, 0x81, 0x4c, 0x04, 0x70, 0xf1, 0xab, 0x0a, 0xe6, 0x12, 0x6f, 0x72, 0x4c, 0xb9, 0x4c,
	0xa3, 0x03, 0x2a, 0x49, 0x65, 0x16, 0xed, 0x50, 0x25, 0x29, 0xfa, 0x0a, 0xce, 0xd2, 0x84, 0x27,
	0xab, 0xa4, 0xc4, 0xb1, 0x8c, 0x49, 0x95, 0x31, 0xb5, 0x6b, 0x30, 0x10, 0x71, 0x3d, 0x07, 0xe0,
	0xe2, 0xad, 0x15, 0xa3, 0x29, 0x19, 0x86, 0x44, 0xe4, 0xf6, 0x97, 0xd0, 0xde, 0x26, 0x05, 0x27,
	0x9c, 0x30, 0x1a, 0x93, 0x54, 0x1a, 0xab, 0x85, 0xe6, 0x11, 0xf3, 0xd3, 0xda, 0xa4, 0x93, 0x8f,
	0x26, 0x5d, 0x81, 0x4e, 0x28, 0xc7, 0xc5, 0xcf, 0x49, 0x26, 0xbd, 0x33, 0xff, 0x23, 0x09, 0xff,
	0x40, 0x08, 0x8f, 0x54, 0x74, 0x05, 0xad, 0x6a, 0x12, 0x4a, 0xbb, 0xe5, 0x34, 0xfb, 0xe6, 0xff,
	0x4e, 0x8d, 0x78, 0x6d, 0x58, 0x73, 0x2f, 0xee, 0x41, 0xaf, 0x0f, 0x43, 0xaf, 0x40, 0xbb, 0x2d,
	0x58, 0x2e, 0x4d, 0x30, 0x47, 0xdd, 0x41, 0x35, 0xcf, 0x83, 0x7a, 0x9e, 0x07, 0x51, 0x3d, 0xcf,
	0x63, 0xfd, 0xfd, 0x1f, 0xe7, 0x8d, 0x77, 0x7f, 0x9e, 0x2b, 0xa1, 0x54, 0xa0, 0x97, 0xa0, 0x72,
	0x26, 0x1d, 0xfa, 0x54, 0x9d, 0xca, 0xd9, 0xe5, 0xbe, 0xfe, 0x0e, 0x72, 0x02, 0xcf, 0xc0, 0x88,
	0xfc, 0x1b, 0x6f, 0x19, 0xb9, 0x37, 0x0b, 0xab, 0x81, 0xda, 0xa0, 0x4f, 0xdd, 0xc8, 0x13, 0x90,
	0xa5, 0x20, 0x1d, 0xb4, 0xf1, 0x7c, 0x3e, 0xb3, 0x54, 0x64, 0xc0, 0x89, 0x1f, 0x44, 0x2f, 0x46,
	0x56, 0xf3, 0x50, 0x7e, 0xf3, 0xd2, 0xd2, 0x90, 0x09, 0xad, 0xd7, 0xb3, 0xb9, 0x2b, 0x16, 0x27,
	0x08, 0xe0, 0x74, 0x19, 0x85, 0x7e, 0x70, 0x6d, 0x9d, 0x8a, 0x8d, 0xe9, 0xdb, 0xc0, 0xbd, 0xf1,
	0x27, 0x56, 0x4b, 0x9c, 0x72, 0xfd, 0xc6, 0x9f, 0x5a, 0xfa, 0xe5, 0x2b, 0x30, 0x8e, 0xdf, 0x40,
	0xc0, 0xc1, 0x3c, 0xf0, 0xaa, 0xa6, 0xaf, 0xdf, 0xcc, 0x66, 0x91, 0xf7, 0x63, 0x54, 0x35, 0x8d,
	0x42, 0xdf, 0xab, 0x9a, 0x86, 0x6e, 0x70, 0xed, 0x59, 0xda, 0xe5, 0xf7, 0xa0, 0xd7, 0xff, 0x40,
	0xc0, 0x8b, 0x99, 0xeb, 0x07, 0x56, 0x43, 0xf6, 0x0c, 0xdc, 0xc5, 0xe2, 0x6d, 0xa5, 0x9b, 0xfa,
	0x93, 0xc8, 0x52, 0x11, 0x82, 0x8e, 0xa8, 0xe2, 0xb1, 0x1f, 0x2d, 0xdc, 0xc9, 0x0f, 0xde, 0xd4,
	0x6a, 0x8e, 0x47, 0xef, 0x1f, 0x7a, 0xca, 0x87, 0x87, 0x9e, 0xf2, 0xd7, 0x43, 0x4f, 0x79, 0xf7,
	0xd8, 0x6b, 0x7c, 0x78, 0xec, 0x35, 0x7e, 0x7f, 0xec, 0x35, 0x7e, 0xb2, 0x0f, 0x81, 0x0d, 0x65,
	0xa8, 0x34, 0xc9, 0x86, 0x87, 0xe4, 0x56, 0xa7, 0xd2, 0xcb, 0x17, 0x7f, 0x07, 0x00, 0x00, 0xff,
	0xff, 0xc7, 0xc5, 0x11, 0x80, 0x99, 0x04, 0x00, 0x00,
}

func (m *ColumnInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ColumnInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ColumnInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NullCount != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.NullCount))
		i--
		dAtA[i] = 0x50
	}
	if m.CompressedSize != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.CompressedSize))
		i--
		dAtA[i] = 0x48
	}
	if m.SizeOnDisk != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.SizeOnDisk))
		i--
		dAtA[i] = 0x40
	}
	if m.Cardinality != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.Cardinality))
		i--
		dAtA[i] = 0x38
	}
	if m.Len != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.Len))
		i--
		dAtA[i] = 0x30
	}
	if m.Nullable {
		i--
		if m.Nullable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Encoding != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.Encoding))
		i--
		dAtA[i] = 0x20
	}
	if m.IndexType != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.IndexType))
		i--
		dAtA[i] = 0x18
	}
	if m.ColumnType != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.ColumnType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SegmentInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SegmentInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Columns) > 0 {
		for iNdEx := len(m.Columns) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Columns[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStorage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Interval != nil {
		{
			size, err := m.Interval.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStorage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Len != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.Len))
		i--
		dAtA[i] = 0x28
	}
	if m.PartitionId != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.PartitionId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.TableName) > 0 {
		i -= len(m.TableName)
		copy(dAtA[i:], m.TableName)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.TableName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DatabaseName) > 0 {
		i -= len(m.DatabaseName)
		copy(dAtA[i:], m.DatabaseName)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.DatabaseName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Interval) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Interval) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Interval) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.To, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.To):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintStorage(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x12
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.From, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.From):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintStorage(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintStorage(dAtA []byte, offset int, v uint64) int {
	offset -= sovStorage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ColumnInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	if m.ColumnType != 0 {
		n += 1 + sovStorage(uint64(m.ColumnType))
	}
	if m.IndexType != 0 {
		n += 1 + sovStorage(uint64(m.IndexType))
	}
	if m.Encoding != 0 {
		n += 1 + sovStorage(uint64(m.Encoding))
	}
	if m.Nullable {
		n += 2
	}
	if m.Len != 0 {
		n += 1 + sovStorage(uint64(m.Len))
	}
	if m.Cardinality != 0 {
		n += 1 + sovStorage(uint64(m.Cardinality))
	}
	if m.SizeOnDisk != 0 {
		n += 1 + sovStorage(uint64(m.SizeOnDisk))
	}
	if m.CompressedSize != 0 {
		n += 1 + sovStorage(uint64(m.CompressedSize))
	}
	if m.NullCount != 0 {
		n += 1 + sovStorage(uint64(m.NullCount))
	}
	return n
}

func (m *SegmentInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.DatabaseName)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.TableName)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	if m.PartitionId != 0 {
		n += 1 + sovStorage(uint64(m.PartitionId))
	}
	if m.Len != 0 {
		n += 1 + sovStorage(uint64(m.Len))
	}
	if m.Interval != nil {
		l = m.Interval.Size()
		n += 1 + l + sovStorage(uint64(l))
	}
	if len(m.Columns) > 0 {
		for _, e := range m.Columns {
			l = e.Size()
			n += 1 + l + sovStorage(uint64(l))
		}
	}
	return n
}

func (m *Interval) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.From)
	n += 1 + l + sovStorage(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.To)
	n += 1 + l + sovStorage(uint64(l))
	return n
}

func sovStorage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStorage(x uint64) (n int) {
	return sovStorage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ColumnInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ColumnInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ColumnInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnType", wireType)
			}
			m.ColumnType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColumnType |= ColumnType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexType", wireType)
			}
			m.IndexType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexType |= IndexType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encoding", wireType)
			}
			m.Encoding = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encoding |= Encoding(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nullable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Nullable = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Len", wireType)
			}
			m.Len = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Len |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cardinality", wireType)
			}
			m.Cardinality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cardinality |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeOnDisk", wireType)
			}
			m.SizeOnDisk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SizeOnDisk |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressedSize", wireType)
			}
			m.CompressedSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompressedSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NullCount", wireType)
			}
			m.NullCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NullCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DatabaseName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DatabaseName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionId", wireType)
			}
			m.PartitionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartitionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Len", wireType)
			}
			m.Len = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Len |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Interval == nil {
				m.Interval = &Interval{}
			}
			if err := m.Interval.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Columns = append(m.Columns, &ColumnInfo{})
			if err := m.Columns[len(m.Columns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Interval) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Interval: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Interval: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.From, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.To, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStorage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStorage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStorage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStorage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStorage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStorage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStorage = fmt.Errorf("proto: unexpected end of group")
)
