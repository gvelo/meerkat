// Copyright 2020 The Meerkat Authors
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package vector

import "meerkat/internal/util/sliceutil"

{{range .}}


type {{.Name}}Vector struct {
	valid []uint64
	buf  []{{.Type}}
	l     int
}

func (v *{{.Name}}Vector)  HasNulls() bool {
	return v.valid != nil
}

func (v *{{.Name}}Vector) Len() int {
	return v.l
}

func (v *{{.Name}}Vector) Cap() int {
	return len(v.buf)
}

func (v *{{.Name}}Vector) RemainingLen() int {
	return len(v.buf)-v.l
}

func (v *{{.Name}}Vector) Remaining() []{{.Type}} {
	return v.buf[v.l:]
}

func (v *{{.Name}}Vector) SetLen(l int) {
	v.l = l
}

func (v *{{.Name}}Vector) Values() []{{.Type}} {
	return v.buf[:v.l]
}

func (v *{{.Name}}Vector) Get( i int ) {{.Type}} {
    if (i > v.l) {
        panic("Buffer overflow")
    }
	return v.buf[i]
}

func (v *{{.Name}}Vector) Append(i []{{.Type}} )  {
	v.buf = append(v.buf[:v.l], i...)
	v.l = len(v.buf)
}

func (v *{{.Name}}Vector ) Append{{.Name}}( i {{.Type}}) {
	v.buf = append(v.buf[:v.l], i)
	v.l = len(v.buf)
}

func (v *{{.Name}}Vector) Buf() []{{.Type}} {
	return v.buf
}

func (v *{{.Name}}Vector) IsValid(i int) bool {
	return v.valid[uint(i)>>log2WordSize]&(1<<(uint(i)&(wordSize-1))) != 0
}

func (v *{{.Name}}Vector) SetValid(i int) {
	v.valid[uint(i)>>log2WordSize] |= 1 << (uint(i) & (wordSize - 1))
}

func (v *{{.Name}}Vector) SetInvalid(i int) {
	v.valid[i>>log2WordSize] &^= 1 << (uint(i) & (wordSize - 1))
}

func New{{.Name}}Vector(buf []{{.Type}}, valid []uint64) {{.Name}}Vector {
	return {{.Name}}Vector{
		buf:  buf,
		valid: valid,
		l: len(buf),
	}
}

func (v *{{.Name}}Vector) AsBytes() []byte {
    b := v.buf[:v.l]
    return sliceutil.AsByteSlice({{.Size}}, unsafe.Pointer(&b))
}

func (v *{{.Name}}Vector) ValidityAsBytes() []byte {
	return sliceutil.U642B(v.valid[:v.l/8])
}

{{ end }}