// Generated by tmpl
// https://github.com/benbjohnson/tmpl
//
// DO NOT EDIT!
// Source: vector.gen.go.tmpl

// Copyright 2020 The Meerkat Authors
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package vector

type IntVector struct {
	nulls []uint64
	data  []int
	l     int
}

func (v *IntVector) Len() int {
	return v.l
}

func (v *IntVector) SetLen(l int) {
	v.l = l
}

func (v *IntVector) Values() []int {
	return v.data[:v.l]
}

func (v *IntVector) IsNull(i int) bool {
	return v.nulls[uint(i)>>log2WordSize]&(1<<(uint(i)&(wordSize-1))) != 0
}

func (v *IntVector) SetNull(i int) {
	v.nulls[uint(i)>>log2WordSize] |= 1 << (uint(i) & (wordSize - 1))
}

func NewIntVector(data []int, nulls []uint64) IntVector {
	return IntVector{
		data:  data,
		nulls: nulls,
	}
}

type UintVector struct {
	nulls []uint64
	data  []uint
	l     int
}

func (v *UintVector) Len() int {
	return v.l
}

func (v *UintVector) SetLen(l int) {
	v.l = l
}

func (v *UintVector) Values() []uint {
	return v.data[:v.l]
}

func (v *UintVector) IsNull(i int) bool {
	return v.nulls[uint(i)>>log2WordSize]&(1<<(uint(i)&(wordSize-1))) != 0
}

func (v *UintVector) SetNull(i int) {
	v.nulls[uint(i)>>log2WordSize] |= 1 << (uint(i) & (wordSize - 1))
}

func NewUintVector(data []uint, nulls []uint64) UintVector {
	return UintVector{
		data:  data,
		nulls: nulls,
	}
}

type FloatVector struct {
	nulls []uint64
	data  []float64
	l     int
}

func (v *FloatVector) Len() int {
	return v.l
}

func (v *FloatVector) SetLen(l int) {
	v.l = l
}

func (v *FloatVector) Values() []float64 {
	return v.data[:v.l]
}

func (v *FloatVector) IsNull(i int) bool {
	return v.nulls[uint(i)>>log2WordSize]&(1<<(uint(i)&(wordSize-1))) != 0
}

func (v *FloatVector) SetNull(i int) {
	v.nulls[uint(i)>>log2WordSize] |= 1 << (uint(i) & (wordSize - 1))
}

func NewFloatVector(data []float64, nulls []uint64) FloatVector {
	return FloatVector{
		data:  data,
		nulls: nulls,
	}
}

type BoolVector struct {
	nulls []uint64
	data  []bool
	l     int
}

func (v *BoolVector) Len() int {
	return v.l
}

func (v *BoolVector) SetLen(l int) {
	v.l = l
}

func (v *BoolVector) Values() []bool {
	return v.data[:v.l]
}

func (v *BoolVector) IsNull(i int) bool {
	return v.nulls[uint(i)>>log2WordSize]&(1<<(uint(i)&(wordSize-1))) != 0
}

func (v *BoolVector) SetNull(i int) {
	v.nulls[uint(i)>>log2WordSize] |= 1 << (uint(i) & (wordSize - 1))
}

func NewBoolVector(data []bool, nulls []uint64) BoolVector {
	return BoolVector{
		data:  data,
		nulls: nulls,
	}
}
