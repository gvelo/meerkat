// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/sebad/desa/workspace_go/eventdb/internal/schema/go

// Package schema is a generated GoMock package.
package schema

import (
	"github.com/golang/mock/gomock"
	"reflect"
)

// MockSchema is a mock of Schema interface
type MockSchema struct {
	ctrl     *gomock.Controller
	recorder *MockSchemaMockRecorder
}

// MockSchemaMockRecorder is the mock recorder for MockSchema
type MockSchemaMockRecorder struct {
	mock *MockSchema
}

// NewMockSchema creates a new mock instance
func NewMockSchema(ctrl *gomock.Controller) *MockSchema {
	mock := &MockSchema{ctrl: ctrl}
	mock.recorder = &MockSchemaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSchema) EXPECT() *MockSchemaMockRecorder {
	return m.recorder
}

// AllIndex mocks base method
func (m *MockSchema) AllIndex() []IndexInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllIndex")
	ret0, _ := ret[0].([]IndexInfo)
	return ret0
}

// AllIndex indicates an expected call of AllIndex
func (mr *MockSchemaMockRecorder) AllIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllIndex", reflect.TypeOf((*MockSchema)(nil).AllIndex))
}

// Index mocks base method
func (m *MockSchema) Index(id string) (IndexInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", id)
	ret0, _ := ret[0].(IndexInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Index indicates an expected call of Index
func (mr *MockSchemaMockRecorder) Index(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockSchema)(nil).Index), id)
}

// IndexByName mocks base method
func (m *MockSchema) IndexByName(id string) (IndexInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexByName", id)
	ret0, _ := ret[0].(IndexInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndexByName indicates an expected call of IndexByName
func (mr *MockSchemaMockRecorder) IndexByName(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexByName", reflect.TypeOf((*MockSchema)(nil).IndexByName), id)
}

// CreateIndex mocks base method
func (m *MockSchema) CreateIndex(index IndexInfo) (IndexInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndex", index)
	ret0, _ := ret[0].(IndexInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIndex indicates an expected call of CreateIndex
func (mr *MockSchemaMockRecorder) CreateIndex(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndex", reflect.TypeOf((*MockSchema)(nil).CreateIndex), index)
}

// UpdateIndex mocks base method
func (m *MockSchema) UpdateIndex(index IndexInfo) (IndexInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIndex", index)
	ret0, _ := ret[0].(IndexInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIndex indicates an expected call of UpdateIndex
func (mr *MockSchemaMockRecorder) UpdateIndex(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIndex", reflect.TypeOf((*MockSchema)(nil).UpdateIndex), index)
}

// DeleteIndex mocks base method
func (m *MockSchema) DeleteIndex(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIndex", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIndex indicates an expected call of DeleteIndex
func (mr *MockSchemaMockRecorder) DeleteIndex(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIndex", reflect.TypeOf((*MockSchema)(nil).DeleteIndex), id)
}

// AllFields mocks base method
func (m *MockSchema) AllFields(id string) ([]Field, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllFields", id)
	ret0, _ := ret[0].([]Field)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllFields indicates an expected call of AllFields
func (mr *MockSchemaMockRecorder) AllFields(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllFields", reflect.TypeOf((*MockSchema)(nil).AllFields), id)
}

// Field mocks base method
func (m *MockSchema) Field(id string) (Field, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Field", id)
	ret0, _ := ret[0].(Field)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Field indicates an expected call of Field
func (mr *MockSchemaMockRecorder) Field(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Field", reflect.TypeOf((*MockSchema)(nil).Field), id)
}

// FieldsInIndexByName mocks base method
func (m *MockSchema) FieldsInIndexByName(name string) ([]IndexInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FieldsInIndexByName", name)
	ret0, _ := ret[0].([]IndexInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FieldsInIndexByName indicates an expected call of FieldsInIndexByName
func (mr *MockSchemaMockRecorder) FieldsInIndexByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FieldsInIndexByName", reflect.TypeOf((*MockSchema)(nil).FieldsInIndexByName), name)
}

// UpdateField mocks base method
func (m *MockSchema) UpdateField(field Field) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateField", field)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateField indicates an expected call of UpdateField
func (mr *MockSchemaMockRecorder) UpdateField(field interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateField", reflect.TypeOf((*MockSchema)(nil).UpdateField), field)
}

// DeleteField mocks base method
func (m *MockSchema) DeleteField(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteField", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteField indicates an expected call of DeleteField
func (mr *MockSchemaMockRecorder) DeleteField(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteField", reflect.TypeOf((*MockSchema)(nil).DeleteField), id)
}

// CreateFields mocks base method
func (m *MockSchema) CreateFields(id string, fields Field) (Field, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFields", id, fields)
	ret0, _ := ret[0].(Field)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFields indicates an expected call of CreateFields
func (mr *MockSchemaMockRecorder) CreateFields(id, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFields", reflect.TypeOf((*MockSchema)(nil).CreateFields), id, fields)
}

// Alloc mocks base method
func (m *MockSchema) Alloc(id string) (PartitionAlloc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Alloc", id)
	ret0, _ := ret[0].(PartitionAlloc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Alloc indicates an expected call of Alloc
func (mr *MockSchemaMockRecorder) Alloc(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Alloc", reflect.TypeOf((*MockSchema)(nil).Alloc), id)
}

// UpdateAlloc mocks base method
func (m *MockSchema) UpdateAlloc(id string, parAlloc PartitionAlloc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAlloc", id, parAlloc)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAlloc indicates an expected call of UpdateAlloc
func (mr *MockSchemaMockRecorder) UpdateAlloc(id, parAlloc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAlloc", reflect.TypeOf((*MockSchema)(nil).UpdateAlloc), id, parAlloc)
}

// Shutdown mocks base method
func (m *MockSchema) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown
func (mr *MockSchemaMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockSchema)(nil).Shutdown))
}
